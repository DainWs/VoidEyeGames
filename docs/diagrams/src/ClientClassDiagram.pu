@startuml
skinparam groupInheritance 5

class Api {}

namespace Desktop {
 namespace pages {
  interface Page {
    +update(): void
    #componentWillMount(): void
    #componentWillUnmount(): void
  }
 }
 namespace models {
  class Games {
   -id: int
   -name: String
   -description: String
   -categories: List<Categories>
   -comments: List<Comments>
   -medias: List<Medias>
   -plataforms: List<Plataforms>
   +getters()
   +setters()
  }
  class Categories {
   -id: int
   -name: String
   +getters()
   +setters()
  }
  class Comments {
   -id: int
   -gamesId: int
   -userId: int
   -description: String
   +getters()
   +setters()
  }
  class Medias {
   -id: int
   -gamesId: int
   -mediaType: String
   +getters()
   +setters()
  }
  class GameDataOnPlataform {
   -plataformsId: int
   -gamesId: int
   -price: Double
   -priceUnit: String
   -discount: Float
   -isEnabled: boolean
   +getters()
   +setters()
  }
  class Plataforms {
   -id: int
   -name: String
   -url: Url
   +getters()
   +setters()
  }
  class Users {
   -id: int
   -name: String
   -email: String
   -password: String
   -publicityAccepted: boolean
   -imageUrl: String
   +getters()
   +setters()
  }
  Games *--o GameDataOnPlataform 
  GameDataOnPlataform o--* Plataforms
  Games o--o Categories
  Games --o Comments
  Users --o Comments
  Games --o Medias
 }
 namespace factories {
  class UsersFactory {
   +parse(User)
   +parseAll(Users)
  }
  Desktop.models.Users <-u- UsersFactory 
  class GamesFactory {
   +parse(Game)
   +parseAll(Games)
  }
  Desktop.models.Games <--r-- GamesFactory
  class CategoriesFactory {
   +parse(Category)
   +parseAll(Categories)
  }
  Desktop.models.Categories <-down-- CategoriesFactory 
  class MediasFactory {
   +parse(Media)
   +parseAll(Medias)
   }
  Desktop.models.Medias <-down-- MediasFactory 
  class CommentsFactory {
   +parse(Comment)
   +parseAll(Comments)
  }
  Desktop.models.Comments <-down-- CommentsFactory 
  class PlataformsFactory {
   +parse(Plataform)
   +parseAll(Plataforms)
  }
  Desktop.models.Plataforms <--- PlataformsFactory 
  GamesFactory -u-> CategoriesFactory
  GamesFactory -u-> MediasFactory 
  GamesFactory -u-> CommentsFactory 
  GamesFactory -u-> PlataformsFactory 
 }
 namespace domain {
	class SessionManager {
		+{static} getInstance()
		+open(Users)
		+update(Users)
		+get(Users)
		+close(Users)
	}
 }
 namespace services {
	class AjaxRequestData {
          -url: String
          -headers: Map<String, String> 
          -params: Map<String, String>
          +getters()
          +setters()
        }
	class AjaxService {
		+{static} getInstance()
		+post(AjaxRequestData)
		+get(AjaxRequestData)
	}
        class DataProvider {
          +{static} getInstance()
          +supply(data)
          +provide()
        }
        class AjaxObserver {
         +subscribe(callback, event): void
         +unsubscribe(callback, event): void
         +notify(event): void
        }
	AjaxRequestData <-l- AjaxService
        AjaxService -d-> DataProvider 
        DataProvider -r-> AjaxObserver
        AjaxObserver -d-> Desktop.pages.Page
 }
 Desktop.services.AjaxService <-- Desktop.pages.Page
 Desktop.services.DataProvider <-- Desktop.pages.Page
 Desktop.domain.SessionManager <-u- Desktop.pages.Page
 Desktop.domain.SessionManager -d-> Desktop.models.Users
 
 class App {
   -displayedPage: Page
   +start()
 }
 App -d-o Desktop.pages.Page
 Desktop.services.AjaxService -u-> .Api 
 Desktop.services.AjaxService <-u- .Api 
}
@enduml