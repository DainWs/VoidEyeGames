@startuml Client Class Diagram
skinparam groupInheritance 5

class Api {}

namespace Desktop {
 namespace pages {
  interface Page {
    +update(): void
    #componentWillMount(): void
    #componentWillUnmount(): void
  }
 }
 namespace models {
  class Games {
   -id: int
   -name: String
   -description: String
   -categories: List<Categories>
   -comments: List<Comments>
   -medias: List<Medias>
   -plataforms: List<Plataforms>
   +getters()
   +setters()
  }
  class Categories {
   -id: int
   -name: String
   +getters()
   +setters()
  }
  class Comments {
   -id: int
   -gamesId: int
   -userId: int
   -description: String
   +getters()
   +setters()
  }
  class Medias {
   -id: int
   -gamesId: int
   -mediaType: String
   +getters()
   +setters()
  }
  class GameDataOnPlataform {
   -plataformsId: int
   -gamesId: int
   -price: Double
   -priceUnit: String
   -discount: Float
   -isEnabled: boolean
   +getters()
   +setters()
  }
  class Plataforms {
   -id: int
   -name: String
   -url: Url
   +getters()
   +setters()
  }
  class Users {
   -id: int
   -name: String
   -email: String
   -password: String
   -publicityAccepted: boolean
   -imageUrl: String
   +getters()
   +setters()
  }
  Games *--o GameDataOnPlataform 
  GameDataOnPlataform o--* Plataforms
  Games o--o Categories
  Games --o Comments
  Users --o Comments
  Games --o Medias
 }
 namespace domain {
	class SessionManager {
		+{static} getInstance()
		+open(Users)
		+update(Users)
		+get(Users)
		+close(Users)
	}
 }
 namespace services {
	class SocketRequest {
		-url: String
		-headers: Map<String, String> 
		-params: Map<String, String>
		+getters()
		+setters()
    }
	class SocketController {
		+{static} getInstance()
		+post(SocketRequest)
		+get(SocketRequest)
	}
	class SocketDataProvider {
		+{static} getInstance()
		+supply(data)
		+provide()
	}
	class SocketObserver {
		+subscribe(callback, event): void
		+unsubscribe(callback, event): void
		+notify(event): void
	}
	SocketRequest <-l- SocketController
	SocketController -d-> SocketDataProvider 
	SocketDataProvider -r-> SocketObserver
	SocketObserver -d-> Desktop.pages.Page
 }
 Desktop.services.SocketController <-- Desktop.pages.Page
 Desktop.services.SocketDataProvider <-- Desktop.pages.Page
 Desktop.models.Games <-- Desktop.pages.Page
 Desktop.domain.SessionManager <-u- Desktop.pages.Page
 Desktop.domain.SessionManager -d-> Desktop.models.Users
 
 class App {
   -displayedPage: Page
   +start()
 }
 App -d-o Desktop.pages.Page
 Desktop.services.SocketController -u-> .Api 
 Desktop.services.SocketController <-u- .Api 
}
@enduml